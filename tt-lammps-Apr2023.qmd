---
title: "Getting Academics Coding in LAMMPS"
subtitle: "Unofficial Thoughts on the Good, the Bad, and the Way Forward"
author: "Shern Ren Tee"
institute: "AIBN and CTCMS, University of Queensland \n s.tee@uq.edu.au"
date: 26 April 2023
date-format: "D MMM YYYY"
bibliography: refs.bib
footer: "DOI: 10.5281/zenodo.7857573"
format:
  revealjs:
    toc: true
    toc-depth: 1
    theme: [default, custom.scss]
    slide-number: true
    code-line-numbers: false
    include-after-body: "footer.html"
title-slide-attributes:
  data-background-color: black
  data-background-image: tt_title_bg.png
  data-background-size: contain
---

## About Me

![I did (PhD) weird DNA simulations, (2019-2020) weird protein simulations, and (2021-now) weird electrode-electrolyte simulations. Spot the pattern! Find out more at my (very poorly maintained) [website](https://srtee.github.io).](my_work.png)

## The People I Work With

::: {layout="[24,12,10]"}

![Prof Debra Bernhardt and the Bernhardt Group](Bernhardt_Group.jpeg)

![The Turing Way](LogoDetailWithText.jpg)

![Research Software Engineers Au-NZ](RSE_AUNZ_logo.png)

:::

# Introduction: LAMMPS as a Community MD Code

## Molecular Dynamics Today: Bigger...

::: {.columns}

:::: {.column width=50%}

![[@alder1959] Molecular dynamics in 1959 ...](alder1959.png){height="450px"}

::::

:::: {.column width=50%}

![[@science2020] ... and today! (4.1 million atoms, 2.5 microseconds!)](science2020.png){height="450px"}

::::

:::


## Molecular Dynamics Today: ... and weirder

::: {.columns .centercaption}

:::: {.column width=35%}

![A digital model of Birmingham](rspa20200653f18.jpg){height="380px"}

::::

:::: {.column width=65%}

![Comparison between real data and model output](rspa20200653f21.jpg){height="380px"}

::::

:::

A virtual pandemic with realistic geography and temporal mobility, modelled using molecular dynamics! [@pandemics2021]

## A Case Study: ELECTRODE for Conductive Molecular Dynamics

::: {.columns .centercaption}

:::: {.column width=45%}

![Capacitor modelling with dynamically-responsive charges using the USER-CONP2 package [@user-conp2]](electrode.jpeg){width="40vw"}

::::

:::: {.column width=45%}

![Calculating the capacitance of molecular nanotubes against theory using the ELECTRODE package [@electrodepkg]](nanotubes.jpeg){width="40vw"}

::::

:::

Conductive electrode molecular dynamics is implemented in other packages (GROMACS, OpenMM, MetalWalls, ...) but so far only the LAMMPS packages are being widely used outside their developing group!

## Method Development Cycle in Molecular Dynamics

* Implementation
* Benchmarking
* Documentation
* Distribution

LAMMPS is a great _community code_ for this cycle!

::: {.notes}
* Implementation: theory, algorithms, code
* Benchmarking: measuring performance or accuracy gains
* Documentation: setting up user interfaces
* Distribution: getting code onto people's machines and HPCs
:::

## A Brief LAMMPS History [@thompson2022]

* Mid-1990s: 
  * Collab (two US DoE labs and three companies)
  * free Fortran code with license agreement
  * 10 years ... 100 downloads

* 2004:
  * C++ GPL code, 50k lines of code
  * downloaded more times in first month than in previous ten years

* Today:
  * 1 million lines of code, several hundred contributors
  * 20-30k downloads per year

# Lessons: ASAP and AMAP

## Lessons Learned from LAMMPS [@plimpton2019lessons]

> **ASAP**: Make your code _as simple as possible_ to understand and extend
>
> **AMAP**: Enable it to be used in _as many as possible_ ways
>
> **Licensing**: LGPL can be a good compromise

See also: [@lammpscommcode]

::: {.notes}
* GPL: derivative works must also be open sourced
* _LGPL: use-by-linking is not considered derivative_
* BSD: "do whatever" (good for companies, bad for OSS devs)
:::

## ASAP and AMAP in LAMMPS

* Drop a `.cpp` and `.h` into `lammps/src` and compile, and you get an add-on!
* LAMMPS can be called as a library:
  * Interfaces: C-style, Python, SWIG
  * Internally-implemented `fix external`
  * Caller can start multiple LAMMPS instances and coordinate messages between them

## AMAP: LAMMPS Inputs As Workflows

::: {.columns}

:::: {.column width=40% .smaller}

Other packages: "turn these dials"

LAMMPS: "put these dials on your system and turn them"

(For example, a script won't run any steps without `run` and won't move any atoms without an integrator like `fix nvt`!)

Resembles "fluent interface" philosophy

::::

:::: {.column width=60% .smaller}

{{< include in.peptide >}}

::::

:::

## ASAP 1: Simple, Clear Coding

LAMMPS uses "C with classes":

* Very little overloading, templating, STL (slowly increasing)
* Low-level structs and kernels are C-style (e.g. n-dim arrays)
* Detailed comments wherever needed

## ASAP 2-4: Straightforward extensibility

::: {.columns}

:::: {.column width=50% .smaller .tightlist}

What do you think this code does?

::::

:::: {.column width=50% .smaller}
{{< include _fix_jumble.qmd >}}
::::

:::

## ASAP 2: Robust core, clear "sockets"

::: {.columns}

:::: {.column width=50% .smaller .tightlist}
**Timestep loop:**

* timestep initialization
* `fix->initial()`
* (sometimes) rebuild neighbor list 
* or send ghost atoms
* force initialization
* `fix->pre_force()`
* compute forces
* `fix->pre_reverse()`
* receive ghost forces
* `fix->post_force()`
* finalize and output

::::

:::: {.column width=50% .smaller}
{{< include _fix_jumble.qmd >}}
::::

:::

## ASAP 3: Good parenting, easy children

::: {.columns}

:::: {.column width=50% .smaller .tightlist}

Parent "styles" define interfaces:

* `pair` for MD potentials
* `compute` for diagnostics (temperature, pressure)
* `fix` for doing _anything_

Children styles inherit interface from parents; just `override` specific parent virtual functions as needed

::::

:::: {.column width=50% .smaller .tightlist}
{{< include _fix_jumble.qmd >}}
::::

:::

## ASAP 3: Parenting Pointers

::: {.columns}

:::: {.column width=50% .smaller .tightlist}

`Pointers` class makes shared data "quasi-static":

```{.cpp filename="pointers.h"}
class Pointers {
 protected:
  LAMMPS *lmp;     // ...
  Atom *&atom;     // ...

 public:
  Pointers(LAMMPS *ptr) :
   lmp(ptr),       // ...
   atom(ptr->atom),// ...
}
```

Now anything inheriting `Pointers` auto-gets references to the necessary data contained in `lmp`!

::::

:::: {.column width=50% .smaller .tightlist}
{{< include _fix_jumble.qmd >}}
::::

:::

## ASAP 4: Style Factories

::: {.columns}

:::: {.column width=50% .smaller .tightlist}

Factory pattern creates a derived `FixJumble` and returns a `Fix` pointer to LAMMPS:

```{.cpp filename="modify.cpp"}
// ...
#define FIX_CLASS

#define FixStyle(_key, _Class)
   (*fix_map)[#_key] 
     = &style_creator<Fix, _Class>;

// C/Make'd list of fixes
#include "style_fix.h" // IWYU pragma: keep
#undef FixStyle
#undef FIX_CLASS
// ...
```

```{.cpp filename="fix_jumble.h"}
// ...
#ifdef FIX_CLASS
FixStyle(jumble,FixJumble);
#else
// ...
```

::::

:::: {.column width=50% .smaller .tightlist}
{{< include _fix_jumble.qmd >}}
::::

:::

## AMAP: Making LAMMPS a Library

* `LAMMPS_NS` namespace prevents code collisions
* Global (static) variables replaced with `Pointer` class
* `MPI_COMM_WORLD` replaced with communicator used to initialize LAMMPS

```{.cpp filename="main.cpp"}
LAMMPS *lammps = new LAMMPS(argc, argv, lammps_comm);
lammps->input->file();
delete lammps;
```



# Challenges and the Future

## Successes ...

User almost completely modified code on their own, made a suitable test, and was just missing some technical details on atom indexing in LAMMPS:

![](scr_success.png)

## ... and Failures

User had an idea for a complicated compute to be used in evaluating a potential, and was asking basic and strange questions _a year after his original post_:

![](scr_failure.png)

## Deep Thought: Programming as Theory-Building

::: {.smaller}

> Programming isn't about writing the code; it's about **understanding the problem and expressing that understanding through code**.  (emphasis added)
>
> ... Why does having a theory of the program matter? Because this enables rapid and effective modification of the program to respond to changing requirements without piling up technical debt or hacks. ([C J Silverio](https://blog.ceejbot.com/posts/programming-as-theory-building/)), ([Peter Naur](https://gist.github.com/onlurking/fc5c81d18cfce9ff81bc968a7f342fb1))

:::

![Diagram of "neighbor-listing", a fundamental molecular dynamics operation and a frequent confuser of LAMMPS coders, from [@thompson2022]](neighlisting.jpg)

## The Future: LAMMPS as a Coding Community?

![If LAMMPS is a _program_ and not just code, then its continued survival and growth relies on introducing people to _the theory of the program_ of molecular dynamics in LAMMPS!](Community.jpg)

::: {.x-small}

{{< include _scriberia.qmd >}}

:::

## Acknowledgements

::: {layout="[24,12,10]"}

![Prof Debra Bernhardt and the Bernhardt Group](Bernhardt_Group.jpeg)

![The Turing Way](LogoDetailWithText.jpg)

![Research Software Engineers Au-NZ](RSE_AUNZ_logo.png)

:::

## References
