@techreport{plimpton2019lessons,
  title={Lessons Learned from Developing LAMMPS.},
  author={Plimpton, Steven J},
  year={2019},
  howpublished = {\url{https://www.osti.gov/servlets/purl/1639472}},
  institution={Sandia National Lab.(SNL-NM), Albuquerque, NM (United States)}
}

@article{lammpscommcode,
title = {Developing community codes for materials modeling},
journal = {Current Opinion in Solid State and Materials Science},
volume = {17},
number = {6},
pages = {271-276},
year = {2013},
note = {Frontiers in Methods for Materials Simulations},
issn = {1359-0286},
doi = {https://doi.org/10.1016/j.cossms.2013.09.005},
url = {https://www.sciencedirect.com/science/article/pii/S1359028613000764},
author = {Steven J. Plimpton and Julian D. Gale},
keywords = {Materials modeling, Open source software, Molecular dynamics, Lattice dynamics, Force fields},
abstract = {For this article, we call scientific software a community code if it is freely available, written by a team of developers who welcome user input, and has attracted users beyond the developers. There are obviously many such materials modeling codes. The authors have been part of such efforts for many years in the field of atomistic simulation, specifically for two community codes, the LAMMPS and GULP packages for molecular dynamics and lattice dynamics respectively. Here we highlight lessons we have learned about how to create such codes and the pros and cons of being part of a community effort. Many of our experiences are similar, but we also have some differences of opinion (like modeling vs modelling). Our hope is that readers will find these lessons useful as they design, implement, and distribute their own materials modelling software for others to use.}
}

@article{lammpslib,
  title={Software components for parallel multiscale simulation: an example with LAMMPS},
  author={FrantzDale, Benjamin and Plimpton, Steven J and Shephard, Mark S},
  journal={Engineering with Computers},
  volume={26},
  pages={205--211},
  year={2010},
  publisher={Springer}
}